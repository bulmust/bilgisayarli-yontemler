---
title: "Temel Kavramlar"
---

## Kullanılacak Modüller

İstatistiksel analizler için gerekli modüller: `scipy.stats`, `scipy.optimize`, `numpy`. Yardımcı modüller ise `matplotlib.pyplot`, `pandas`, `seaborn`.

## İstatistikteki Tanımlar

- **Popülasyon (Population):** Bir nesnenin tüm özelliklerini belirlemek için seçilen örneklerdir.
- **Örneklem (Sample):** Bir nesnenin özelliklerini belirlemek için seçilen örneklerdir.
- **Belirsizlik (Uncertainty):** Örneklem veya popülasyonun özelliklerini belirlemek için kullanılan örneklerin sayısının yetersiz olmasıdır.
- **Veri (Data):** Bir araştırma veya analiz için toplanan sayısal veya kategorik bilgilerdir.
- **Ortalama (Mean) :** Veri setinin tüm değerlerinin toplamının, veri setindeki eleman sayısına bölünmesiyle elde edilir.
- **Medyan veya Ortanca Değer (Median):** Veri setindeki değerlerin ortalamasına göre sıralandıktan sonra ortadaki değerdir.
- **Mod veya Tepe Değer (Mod):** Veri setindeki en sık tekrar eden değerdir.
- **Varyans (Variance) :** Veri setindeki değerlerin ortalama değere ne kadar dağıldığını ölçen bir istatistiksel ölçüdür.
- **Standart Sapma (Standard Deviation):**  Veri setindeki değerlerin ortalama değerden ne kadar sapma gösterdiğini gösteren bir ölçüdür.
- **Çeyrekler (Quartiles):** Veri setindeki değerlerin sıralanmasından sonra ortadaki değer orta çeyreklik, orta çeyreklik ile en küçük değerin ortasındaki değer alt çeyreklik (\%25), orta çeyreklik ile en büyük değerin ortasındaki değer üst çeyreklik (\%75) olarak tanımlanır.
- **Minimum ve maksimum değer (Minimum and Maximum):** Veri setindeki en küçük ve en büyük değerlerdir.

### Dağılımlar

Dağılımları anlamak için aşağıdaki karakteristik özelliklere bakabiliriz.

- **Merkezi eğilim** (Central tendency): Dağılımın bir merkezi var mı? 
- **Modlar**: En sık tekrar eden değerler dağılımda nasıl gözüküyor?
- **Yayılım** (Spread): Dağılımın merkezden uzağa doğru nasıl yayılmış? Simetrik mi?
- **Kuyruklar** (Tails): Dağılımın kuyruklarında nasıl bir dağılım var?
- **Aykırılar** (Outliers): Dağılımın kuyruklarında "aykırı" değerler var mı? Veriyi nasıl etkiliyorlar?

Ortalama değer (aritmetik ortalama) aşağıdaki formül ile hesaplanır.

$$
\overline{x} = \frac{1}{n} \sum_{i=1}^{n} x_i
$$

### Varyans

Varyansın formülü aşağıdaki gibidir.

$$
s^{2} = \frac{1}{n} \sum_{i=1}^{n} (x_i - \overline{x})^{2}
$$

- Varyansın karekökü ise **standart sapma**dır.
- Örneklem uzayı kullanılıyorsa, payda $n-1$, popülasyon kullanılıyorsa payda $n$ olmalıdır.

Örneğin bir veri setinde ortalama hamilelik süresi $38.6$ olsun. Bu değerin standart sapması $2.7$ olarak elde edilsin. Bu da demek oluyor ki gebelik süresi $38.6 \mp 2.7$ şeklinde söyleyebiliriz.

Histogramlar, veri setlerinin dağılımlarını görselleştirmek için kullanılır. Histogram ile yapılan görsellerde, veri setlerinin merkezi eğillerini, modunu, yayılımını ve kuyruklarını görebiliriz. Ayrıca histogramlar, veri setlerindeki aykırı değerleri belirlemek için de kullanılır.

### Efektif Boyut

Bir popülasyonda veya örneklemde, iki değişken arasındaki ilişkinin gücünü vermek için **Cohen'in d değeri** tanımlanır. Ayrıntılı bilgi için referanslara bakın.

$$
d = \frac{\overline{x}_1 - \overline{x}_2}{s_{havuz}}
$$

Burada $\overline{x}_1$ birinci grubun ortalaması, $\overline{x}_2$ ikinci grubun ortalaması ve $s_{havuz}$ ise grupların *ortak havuz standart sapmasıdır* (pooled standard deviation). $s_{havuz}$ aşağıdaki gibi tanımlanır.

$$
s_{havuz}= \sqrt{\frac{n_1s_1^2 + n_2s_2^2}{n_1 + n_2}}
$$

Burada $n1$ ve $n2$ grupların örneklem sayısı, $s1$ ve $s2$ grupların standart sapmasıdır.

![Cohen'in d değeri](assets/cohen_d_degeri.png)

## Alıştırma 1

Bir araştırmada seçimlerdeki oy dağılımı tahmin edilmek istenmektedir. Toplamda 1000 kişi oy vereceğini düşünelim. Anket şirketi de 100 kişiye sormuş. Bu 100 kişinin oy dağılımı şu şekilde:

| A Partisi | B Partisi | C Partisi | D Partisi | Kararsız |
|-----------|-----------|-----------|-----------|----------|
| 30        | 15        | 40        | 10        | 5        |

### Çözüm

```{python}
import pandas as pd
import numpy as np
# Veri seti
df= pd.Series({'A Parisi':30,
               'B Partisi':15,
               'C Partisi':40,
               'D Partisi':10,
               'Kararsız':5})
# Çiz
df.plot(kind='bar', title='Parti Seçimlerine Göre Oy Dağılımı', ylabel='Oy Sayısı')
# Pandas açıklama
print(df.describe())
```

Yukarıdaki tanımlara doğrultusunda alıştırmayı tekrar ele alalım.

- **Popülasyon**: 1000 (Tüm nüfus)
- **Örneklem**: 100 (Anket yapılan kişi sayısı)
- **Örneklem** Adeti: 1 (Kaç kere anket yapıldığı, 1 şirket)
- **Belirsizlik**: 900 (Kime oy vereceği bilinmeyen kişi sayısı)
- **Veri**: 100
  - 30 A Partisi, 15 B Partisi, 40 C Partisi, 10 D Partisi, 5 Kararsız
- **Ortalama**: 20
  - 30 + 15 + 40 + 10 + 5 = 100 / 5 = 20 
- **Medyan** (Ortanca Değer): 15 (B Partisi)
  - 40, 30, 15, 10, 5 sıralandığında ortanca değer 15
- **Mod** (Tepe Değer): En sık tekrar eden değer yok.
- **Varyans** $\sigma^{2}$: 170.0
  - $(|30-20|^{2} + |15-20|^{2} + |40-20|^{2} + |10-20|^{2} + |5-20|^{2})/5 = 170.0$  
- **Standart Sapma**: 13.0
  - $\sqrt{(|30-20|^{2} + |15-20|^{2} + |40-20|^{2} + |10-20|^{2} + |5-20|^{2})/5} = 13.0$
- **Çeyrekler**: 10, 15, 30
  - 40, 30, 15, 10, 5 sıralandığında
    - Alt Çeyreklik: 10 (\%25)
    - Ortanca çeyreklik: 15 (\%50)
    - Üst Çeyreklik: 30 (\%75)
- **Minimum ve Maksimum değer**: 5 ve 40

Eğer veriler ortalama değerden farkları az olursa standart sapma ve varyanas değerleri küçük olur.

```{python}
import numpy as np

# Veri: 21,22,20,18,19
print("Veri: 21,22,20,18,19")
print(f"Varyans (Veri-Ortalamaya-Yakın): {(1**2 + 2**2 +2**2 +1**2)/5}")
print(f"Standart Sapma (Veri-Ortalamaya-Yakın): {np.sqrt((1**2 + 2**2 +2**2 +1**2)/5)}")
print("-"*20)
# Veri: 30,15,40,10,5  
print("Veri: 30,15,40,10,5")
print(f"Varyans: {(10**2 + 5**2 +20**2 +10**2+ 15**2)/5}")
print(f"Standart Sapma: {np.sqrt((10**2 + 5**2 +20**2 +10**2+ 15**2)/5)}")
```

`pandas` içerisinde `describe()` fonksiyonu ile belirlenen değerleri `numpy` paketi ile de belirleyebiliriz.

```{python}
import numpy as np
veri= np.array([30., 15., 40., 10., 5.])
print("Veri: 30,15,40,10,5")
print(f"Ortalama: {veri.mean()}")
print(f"Varyans: {veri.var()}")
print(f"Standart Sapma: {veri.std()}")
print(f"Medyan: {np.median(veri)}")
print(f"Minimum ve Maksimum: {veri.min()} ve {veri.max()}")
print(f"Çeyrekler: {np.percentile(veri, [25, 50, 75])}")
```

::: {.callout-warning}
Pandas'ın verdiği standart sapma ile tanımdan elde ettiğimiz standart sapma değerleri farklıdır. Bunun sebebi `pandas`'ın yansız (unbiased) yaklaşımı kullanmasıdır. Daha ayrıntılı bilgi için [@web2024Apr-2] numaralı kaynağa bakınız.
:::

```{python}
import pandas as pd
import numpy as np
# Veri
df= pd.Series([30, 15, 40, 10, 5])
veriNP= np.array([30, 15, 40, 10, 5])
print(f"Standart Sapma, Pandas: df.std()= {df.std()}")
print(f"Standart Sapma, Numpy: veriNP.std()= {veriNP.std()}")
```

Burada `pandas` ile `numpy` modüllerinin standart sapma (varyans) değerleri, varsayılan özellikler kullanıldığında aynı sonucu vermez. Bunun sebebi istatistikte "yanlı/yansız (biased/unbiased)" olarak bilinen iki farklı yaklaşım olmasıdır. Bu iki yaklaşımın farklılıkları için aşağıdaki linkleri inceleyebilirsiniz.

- [what-is-the-difference-between-bias-and-variance](https://stackoverflow.com/questions/2480650/)
- [orneklemin-standart-sapmasinin-hesaplanmasi](assets/nedenOrnekleminVaryansiFarkli.pdf)
- [Neden standart sapma hesaplanırken n-1 yapılır?](https://tr.khanacademy.org/math/statistics-probability/summarizing-quantitative-data/more-on-standard-deviation/v/review-and-intuition-why-we-divide-by-n-1-for-the-unbiased-sample-variance)

`numpy` yanlı yaklaşımı ($n$'e bölme) kullanırken `pandas` yansız yaklaşımı ($n-1$'e bölme) kullanmaktadır. 

*TL;DR*

- **Popülasyon üzerinden hesap yapmak istiyorsanız yanlı yaklaşımı**, `df.std(ddof=0)` veya `np.std()` kullanın.
- **Örneklem üzerinden hesap yapmak istiyorsanız yansız yaklaşımı** `df.std()` veya `np.std(ddof=1)` kullanın.

## Rastgele Sayılar

Önce `numpy` modülü içerisindeki `random` paketi ile rastgele sayılar üretelim. 

- `np.random.rand(N)`: $[0,1)$ arasında <span style="color:red">düzgün olarak </span> (uniformly) `N` boyutlu rastgele sayı üretir.
- `np.random.randn()`: $N(0,1)$ arasında <span style="color:red">standart normal dağılımlı </span> olarak (standard normal distribution) rastgele sayı üretir.
- `np.random.randint(a,b)`: $[a,b)$ arasında <span style="color:red">düzgün olarak </span> (uniformly) rastgele sayı üretir.

```{python}
import numpy as np
print(f"5 Boyutlu düzgün dağılımlı rastgele sayılar: {np.random.rand(5)}")
print(f"5 Boyutlu normal dağılımlı rastgele sayılar: {np.random.randn(5)}")
print(f"5 boyutlu 0 ile 10 arasında rastgele tam sayılar: {np.random.randint(0, 10, 5)}")
```

Standart normal dağılımı rastgele sayı üreteci 0'ın ortasında ve 1'in standart sapması olan bir dağılım oluşturur. Bu dağılımın özelliklerini görmek için aşağıdaki kodu çalıştırın.

```{python}
import numpy as np
import matplotlib.pyplot as plt

# 1000 tane rastgele sayı üret
#x = np.random.randn(1000)
x = np.random.randn(1_000_000)

# Histogram çiz
plt.hist(x, bins=40)
plt.show()
plt.close()
```

```{python}
import numpy as np
import matplotlib.pyplot as plt
# Rastgele sayı üret [0,1)
print(np.random.rand())
print("-"*20)
# Rastgele 5 tane sayı üret [0,1)
print(np.random.rand(5))
print("-"*20)
# Rastgele 2x4 matris üret [0,1)
print(np.random.rand(2, 4))
print("-"*20)
# Rastgele Normal dağılımlı sayı üret
print(np.random.randn(10))
print("-"*20)
# Rastgele tam sayı üret [0,10)
print(np.random.randint(0, 10))
print("-"*20)
# Rastgele 5 tane tam sayı üret
print(np.random.randint(0, 10, 5))
# print(np.random.randint(low=0, high=10, size=5))
print("-"*20)
# Rastgele 2x4 matris üret [0,10)
print(np.random.randint(0, 10, (2, 4) ))
#print(np.random.randint(low=0, high=10, size=(2,4)))

# Çiz
fig, axes = plt.subplots(3,1)
axes[0].hist(np.random.rand(10_000))
axes[0].set_title("rand(10_000)")
axes[1].hist(np.random.randn(10_000))
axes[1].set_title("randn(10_000)")
axes[2].hist(np.random.randint(low=1, high=10, size=10_000), bins=9, align='left')
axes[2].set_title("randint(low=1, high=10, size=10_000)")
plt.tight_layout()
```

İlerleyen bölümlerde belli bir array'den rastgele bir eleman seçmek isteyeceğiz. Bunun için `np.random.choice()` özelliğini kullanacağız. Eğer `replace=False` özelliği ile kullanırsak seçilen eleman tekrar seçilemez. Varsayılan özellik `replace=True`'dur.

```{python}
import numpy as np
# 0 ile 4 arasında 3 tane rastgele sayı seç
print(np.random.choice(5, 3))
# Aynı işi np.random.randint(0,5,3) de yapar
print("--"*20+"1")
# 0.1, 0, 0.3, 0.6, 0 olasılıkları ile 3 tane rastgele sayı seç.
# Yani 0.1 olasılıkla 0, 
#      0 olasılıkla 1, 
#      0.3 olasılıkla 2, 
#      0.6 olasılıkla 3, 
#      0 olasılıkla 4
print(np.random.choice(5, 3, p=[0.1, 0, 0.3, 0.6, 0]))
print("--"*20)
# Tekrar seçim yapmadan 3 tane rastgele sayı seç
print(np.random.choice(5, 3, replace=False))
# Aynı işi np.random.permutation(np.arange(5))[:3] de yapar
print("--"*20)
# Harfler arasından 2 tane rastgele isim seç
harfler = ['A', 'B', 'C', 'Ç' ,'D', 'E', 'F', 'G', 'Ğ' , 'H']
print(np.random.choice(harfler, 2))
print(np.random.choice(harfler, 2, replace=False))
```

Rastgele sayı seçiminde çekirdek (seed) seçimi de önemli bir faktördür çünkü rastgelelik bir çekirdek üzerinden oluşur. Aynı çekirdek seçilir ise "*aynı rastgelelik*" kullanarak sayılar/seçimler oluşturulur.

Bizim çalışacağımız problemlerde çekirdek seçimi önemli olmayacaktır ancak oyun, simülasyon gibi problemlerde çekirdek seçimi önemli olabilir.

![Terraria Seed](assets/seed_terraria.png)

![Minecraft Seed](assets/seed_minecraft.jpeg)

Çekirdek seçimi için `np.random.seed()` fonksiyonunu kullanılır.

Belirlenen bir çekirdek üzerine seçimler yapmak için aşağıdaki gibi bir rastgele durum belirlenir.

```{python}
import numpy as np
import matplotlib.pyplot as plt

# Oyun Haritası 42 çekirdek kullan
cekirdekSayisi= 42
cekirdek= np.random.RandomState(cekirdekSayisi)
# 2 boyutlu bir harita olacak şekilde çizdir
plt.imshow(cekirdek.rand(8,8), cmap='gray', interpolation='nearest')
plt.show()
plt.close()
print(f"4 adet rastgele sayı: {cekirdek.rand(4)}")
print("-"*20)
print(f"4 adet rastgele sayı: {cekirdek.rand(4)}")
```

Yukarıdaki programı tekrar çalıştırdığımızda aynı sonuçları alırız. Çünkü çekirdek aynıdır.

```{python}
import numpy as np
import matplotlib.pyplot as plt

# Oyun Haritası 42 çekirdek kullan
cekirdekSayisi= 42
cekirdek= np.random.RandomState(cekirdekSayisi)
# 2 boyutlu bir harita olacak şekilde çizdir
plt.imshow(cekirdek.rand(8,8), cmap='gray', interpolation='nearest')
plt.show()
plt.close()
print(f"4 adet rastgele sayı: {cekirdek.rand(4)}")
print("-"*20)
print(f"4 adet rastgele sayı: {cekirdek.rand(4)}")
```

## Rastgele Değişkenler ve Dağılımlar

Popülasyondan rastgele seçilen örneklem üzerinden yapılan istatistiksel incelemelerde, örneklem dağılımının popülasyon dağılımına yakın olması istenir. Bu ve benzeri konular için matematikte *olasılık teorisi* bulunmaktadır.

- **Örnek Uzayı (Sample Space)**: Bir deneyin tüm olası sonuçlarının bir kümesidir.
  - Örnek uzaydaki tüm elemanlar için bir olasılık değeri vardır.
- **Olasılık Dağılımı (Probability Distribution)**: Bir deneyin tüm olası sonuçlarının olasılıklarının bir dağılımıdır.
- **Rastgele Değişken (Random Variables)**: Bir deneyin sonucu olarak elde edilen değerlerdir.
  - Rastgele değişkenlerin birbirinden bağımsız olması gerekir.

Örneğin

- Bir paranın örnek uzayı $\{Yazı,Tura\}$'dır.
- Rastgele değerleri $\{0,1\}$'dir.

İstatistiksel işlemler kullanmak için rastgele değişkenlerin olasılık dağılımlarına ihtiyacımız vardır. 

Rastgele değişkenler alacağı olası değerler ile karakterize edilir ve bu değerler de olasılık dağılımına göre belirlenir.

En temelde iki çeşit dağılım vardır.
1. Kesikli Dağılımlar, Tam Sayılar (Discrete Distributions)
2. Sürekli Dağılımlar, Gerçel Sayılar (Continuous Distributions)

`scipy.stats` modülü içerisindeki `rv_discrete` ve `rv_continuous` sınıfları ile dağılımların özelliklerine ulaşabiliriz. Bu paketteki metotlar ve açıklamaları için [dokümantasyon](https://docs.scipy.org/doc/scipy/reference/stats.html) sayfasına veya **Numerical Python** kitabında tablo 13-1'e bakabilirsiniz.

Bazı dağılımlar:

- **Uniform Dağılım (Uniform Distribution)**: $U(a,b)$
- **Standart Normal Dağılımı (Standard Normal Distribution)**: $N(0,1)$
- **Normal Dağılım (Normal Distribution)**: $N(\mu,\sigma^2)$
- **Üstel Dağılım (Exponential Distribution)**: $Exp(\lambda)$
- **Fermi-Dirac Dağılımı (Fermi-Dirac Distribution)**: $FD(\mu,\beta)$
- **Bose-Einstein Dağılımı (Bose-Einstein Distribution)**: $BE(\mu,\beta)$
- **Binom Dağılımı (Binomial Distribution)**: $B(n,p)$
- **Poisson Dağılımı (Poisson Distribution)**: $P(\lambda)$
- **Gamma Dağılımı (Gamma Distribution)**: $Gamma(\alpha,\beta)$
- **Beta Dağılımı (Beta Distribution)**: $Beta(\alpha,\beta)$
- **Chi-Square Dağılımı (Chi-Square Distribution)**: $\chi^2(n)$

## Alıştırma 2

Ortalama değeri 1 olan ve standart sapması 0.5 olan bir normal dağılım üretelim.

### Çözüm

```{python}
import scipy.stats as stats

X= stats.norm(1, 0.5)
print(f"Ortalama: {X.mean()}")
print(f"Median: {X.median()}")
print(f"Standart Sapma: {X.std()}")
print(f"Varyans: {X.var()}")
```

## Histogramlar

Histogram denildiğinde verinin dağılımdan ve frekansından bahsetmemiz gerekir.

Örneğin:

1. $1$, $2$, $3$, $4$, $5$, $6$ sayıları verimiz olsun. Bu verinin dağılımı tam sayılar arasında eşit olasılıkla dağılmıştır. Yani her sayının gelme olasılığı aynıdır. Bu verinin frekansı yani tekrarlanma sayısı da aynıdır. Çünkü her sayı birer kez tekrar edilmiştir.
2. $1$, $3$, $3$, $3$, $4$, $6$ sayıları verimiz olsun. Bu verinin dağılımı tam sayılar arasında eşit olasılıkla dağılmamıştır. Yani her sayının gelme olasılığı aynı değildir. $1$, $4$ ve $6$ sayılarının gelme olasılığı $1/6$, $3$ sayısının gelme olasılığı $3/6$'dır. Bu verinin frekansı yani tekrarlanma sayısı da aynı değildir. Çünkü $3$ sayısı 3 kez tekrar edilmiştir.

Bu iki örneğin histogramlarını çizelim.

```{python}
import pandas as pd
import matplotlib.pyplot as plt
# Veri
seri1= pd.Series([1,2,3,4,5,6,7,8,9,10])
seri2= pd.Series([1,1.5,2,2,3,3,3,4,4,5,6,7,8,9,10])
# Çiz
fig, axs= plt.subplots(2,1)
seri1.plot(kind="hist", ax=axs[0], title="seri1", bins=5)
seri2.plot(kind="hist", ax=axs[1], title="seri2", bins=11)
```

**Bins**: Yatay eksendeki sütun sayısı. 

Örneğin: 1,2,3,4,5 verisi var ise bin=5 yapıldığında sütunların arası hiç gözükmez, çünkü yatay eksende 1 değerinin üstünde sütun olur, 2 değerinin üstünde sütun olur vs. bin=11 yapıldığında ise kabaca 0.5 üzerinde ve 1 üzerinde sütun çizilmeye
çalışılır.

Aşağıdaki linklerden bin sayısı en iyi nasıl seçilir hakkında bilgi alabilirsiniz.

- [Bin sayısı en iyi nasıl seçilir?](https://stackoverflow.com/questions/33458566)
- [Bin arası nasıl ayrılır?](https://stackoverflow.com/questions/64198842/)

Python ile veri analizinde `collections` paketi de kullanılır.

```{python}
from collections import Counter
import pandas as pd
# Veri
df_p= [1, 2, 3, 4, 4, 5, 6, 7, 8, 8, 8, 8, 9]
# Collections paketinde bulunan Counter fonksiyonu
df_pCounter= Counter(df_p)
print(f"Veri: {df_p}")
print(f"Counter :{df_pCounter}")
print(f"Counter tipi: {type(df_pCounter)}")
print(f"8'in frekansı {df_pCounter[8]}")
print(f"3'in frekansı {df_pCounter[3]}")
print("-"*20)
# Pandas
dS= pd.Series(df_p)
print(f"Veri: {dS}")
print(f"Serinin tipi: {type(dS)}")
print(f"Tüm frekanslar\n{dS.value_counts()}")
print(f"8'in frekansı {dS.value_counts()[8]}")
```

## Problemler

### Problem 1

100 adet parayı 1000 kere atan ve `np.random.rand()` fonksiyonu kullanan bir betik dosyası yazın. Her atıldığında 100 tane paranın kaç tanesi tura geldiğini kaydedin ve sonucu histogram grafiği olarak çizdirin. 

### Problem 2

Uygulama 1 ile verilen betik dosyasını `np.random.choice()` fonksiyonu kullanarak yapın.

### Problem 3

100 adet zarı 1000 kere atan ve `np.random.choice()` fonksiyonunu kullanan bir betik dosyası yazın. Her atıldığında 100 tane zarın kaç tanesinin 6 geldiğini, kaç tanesinin 5 geldiğini vs. kaydedin ve sonucu histogram grafiği olarak çizdirin.

### Problem 4

Aşağıdaki linkte bulunan excel dosyasını indirin. 

[Standart Solar Spectrumu Linki](https://www.pveducation.org/sites/default/files/PVCDROM/Appendices/AM0AM1_5.xls). Eğer bu link çalışmazsa [github reposunda bulunan dosyayı](../../../veri/veri_AM0AM1_5.xls) da indirebilirsiniz.

- Bu excel dosyasındaki verileri temizleyin.
  - Başlıkları sadece `Wavelength (nm)`, `Extraterrestrial W*m-2*nm-1`, `Global tilt  W*m-2*nm-1`, `Direct+circumsolar W*m-2*nm-1` kalsın.
  - Tüm diğer verileri silin.
  - Tüm tablar (sheets) silin.
  - Tüm veriyi `float` tipine çevirin.
- Temizlediğiniz veriyi okuyun ve `Wavelength (nm)` sütununu x ekseni olacak şekilde tüm kolonların grafiklerini aynı figürde çizdirin.
- `Extraterrestrial W*m-2*nm-1` en yüksek değerini bulun.
- En yüksek değerin kaç Kelvin olduğunu bulun. (Stefan-Boltzmann Kanunu)
- En yüksek değerin kaç Celsius olduğunu bulun.
- Görünür ışığın spektrumunu yukarıda çizdiğiniz grafikte gösterin.

Kaynak: [Solar Spectrum](https://www.pveducation.org/pvcdrom/appendices/standard-solar-spectra)

## Kaynaklar

1. Numerical Python: Scientific Computing and Data, Science Applications with Numpy, SciPy and Matplotlib, Robert Johansson, Apress, İkinci Basım, 2019, **syf 443**
2. [https://www.mathsisfun.com/data/](https://www.mathsisfun.com/data/)
3. [Wikipedia: Efektif Boyut, Cohen's d ](https://en.wikipedia.org/wiki/Effect_size)
4. [Cohen D'nin tanımı ve grafik](https://www.statisticshowto.com/probability-and-statistics/statistics-definitions/cohens-d/)
