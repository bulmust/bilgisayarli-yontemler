---
title: "Fourier Dönüşümü"
---

## Kesikli Fourier Dönüşümü (Discrete Fourier Transform, DDT), KFD

Basit bir dalgada periyot/frekans, genlik faz gibi kavramları anladık. Peki daha karışık dalgaları nasıl analiz edeceğiz? 

$$
y(t) = \sin(\omega t + \phi) + \cos(2* \omega t + \phi)
$$

```{python}
import numpy as np
import matplotlib.pyplot as plt
# Örneklem frekansı (rate)
sr = 100.0 # Kaç adet nokta olsun?
# Örneklem aralığı
ts = 1.0/sr # Noktaların aralığı ne olsun?
t= np.arange(0, 4*np.pi, ts)
omega= 2* np.pi* 0.2

plt.plot(t, np.cos(omega*t)+ np.sin(2*omega*t), 'b', label= '$\sin(\omega*t)+ \cos(\omega*t)$')
plt.ylabel("Genlik")
plt.xlabel("Zaman (s)")
plt.xticks([0, np.pi/2, np.pi, 3*np.pi/2, 2*np.pi, 5*np.pi/2, 3*np.pi, 7*np.pi/2, 4*np.pi],
           ["0", "$\pi$/2", "$\pi$", "3$\pi$/2", "2$\pi$", "5$\pi$/2", "3$\pi$", "7$\pi$/2", "4$\pi$"])
plt.legend()
plt.show()
```

Bu şekilde tek bir frekans değeri değeri belirleyemeyiz. Benzer şekilde genlik de gözükmemektedir.

Bu ve bunun gibi dalgaları analiz etmek için Fourier dönüşümü kullanılır. Fourier dönüşümü, bir dalgayı frekans bileşenlerine ayırır. Kesikli Fourier dönüşümünün formülü aşağıdaki gibidir.

$$
X_{k} = \sum_{n=0}^{N-1} x_{n} e^{-i 2 \pi k n / N}
$$

$$
X_{k}= \sum_{n=0}^{N-1} x_{n} \left[ \cos \left( \frac{2 \pi k n}{N} \right) - i \sin \left( \frac{2 \pi k n}{N} \right) \right]
$$

Burada

- N: Örnek sayısı
- n: Örnek numarası
- k: Frekans numarası (0, 1, 2, ..., N-1)
- $x_{n}$: n. örneğin değeri
- X_{k}: k. frekansın değeri

Aşağıdaki şekilde birbirinden farklı genliğe ve frekansa sahip 3 dalganın üst üste binmesi ile açığa çıkan şekli görebilirsiniz [@web2024Feb-7].

![](https://blog.dta.com.tr/wp-content/uploads/2020/03/fourier_donusumu.jpg){fig-align="center"}

---

Örneğin elimizde 3 örnekli bir dalga olsun. Yani örneğin sinüs dalgasını 3 adet nokta ile örneklenmiş olsun. Bu noktalardan oluşan dalganın frekans bileşenlerini bulmak için Fourier dönüşümünü kullanabiliriz.

$$
X_{k} = \sum_{n=0}^{3} x_{n} e^{-i 2 \pi k n / 10}
$$

$$
\begin{align*}
    X_{0}=& x_{0} e^{-i (2 \pi 0\times0) / 3} + x_{1} e^{-i (2 \pi 0\times1) / 3} + x_{2} e^{-i (2 \pi 0\times2) / 3}\\
    =& x_{0} e^{0} + x_{1} e^{0} + x_{2} e^{0}\\
    =& x_{0} + x_{1} + x_{2}\\
    X_{1}= & x_{0} e^{-i (2 \pi 1\times0) / 3} + x_{1} e^{-i (2 \pi 1\times1) / 3} + x_{2} e^{-i (2 \pi 1\times2) / 3}\\
    =& x_{0} e^{0} + x_{1} e^{-i 2 \pi / 3} + x_{2} e^{-i 4 \pi / 3}\\
    =& x_{0} + x_{1} (\cos(2 \pi / 3) - i \sin(2 \pi / 3)) + x_{2} (\cos(4 \pi / 3) - i \sin(4 \pi / 3))\\
    =& x_{0} + x_{1} (-0.5 - i 0.866) + x_{2} (-0.5 + i 0.866)\\
    X_{2}= & x_{0} e^{-i (2 \pi 2\times0) / 3} + x_{1} e^{-i (2 \pi 2\times1) / 3} + x_{2} e^{-i (2 \pi 2\times2) / 3}\\
    =& x_{0} + x_{1} e^{-i 4 \pi / 3} + x_{2} e^{-i 8 \pi / 3}\\
    =& x_{0} + x_{1} (\cos(4 \pi / 3) - i \sin(4 \pi / 3)) + x_{2} (\cos(8 \pi / 3) - i \sin(8 \pi / 3))\\
    =& x_{0} + x_{1} (-0.5 + i 0.866) + x_{2} (-0.5 - i 0.866)
\end{align*}
$$


::: {.callout-important}
1. Her zaman $X_{0}= \sum_{n=0}^{N-1} x_{n}$ şeklinde olacaktır.
2. $X_{n}$ karmaşık bir sayıdır.
:::

Bir dalganın frekanslarını belirlemek için Fourier dönüşümü kullanacağımızı söylemiştik ancak elde ettiğimiz frekanslar $X_{k}$ karmaşık sayı olarak karşımıza çıktı. Gerçek frekans değerleri için $X_{k}$ değerlerinin modülünü, $|X_{k}|$, alacağız.

Sinyalin genliği ($A_{k}$) ve fazı ($\phi_{k}$) ise aşağıdaki şekilde hesaplanır.

$$
A_{k} = \frac{|X_{k}|}{N}
$$

$$
\phi_{k} = \arctan \left( \frac{Im(X_{k})}{Re(X_{k})} \right)
$$

::: {.callout-warning}
- Eğer tek sayıda örnek varsa, yani $N$ tek ise, k tane $X$ değerlerinin 1'den $(N-1)/2$ kadar olanlar pozitif frekanslı $(N+1)/2$'den $N-1$ kadar olanlar negatif frekanslıdır.
- Eğer çift sayıda örnek varsa, yani $N$ çift ise, k tane $X$ değerlerinin 1'den $(N/2)-1$ kadar olanlar pozitif frekanslı $(N/2)$'den $N-1$ kadar olanlar negatif frekanslıdır.
- $X_{k}$ değerlerini hesaplarken modülünü aldığımızdan dolayı negatif frekanslı değerlerin modülü pozitif frekanslı değerlerin modülüne eşittir. Bundan dolayı negatif frekanslı değerleri hesaplamaya gerek yoktur. Bu yüzden $X_{k}$ değerlerini hesaplarken sadece pozitif frekanslı değerleri hesaplamak yeterlidir.
:::

Yukarıdaki gibi örnek oranının yarısına **Nyquist frekansı** denir. Yani $N-1$ üzerinden toplam almak yerine $N/2$ üzerinden toplam alırsak Nyquist frekansına ulaşırız.

## Ters Kesikli Fourier Dönüşümü, (Inverse Discrete Fourier Transform, IDFT), TKFD

DFT'nin tersi de yapılabilir. Yani $X_{k}$ değerlerinden $x_{n}$ değerlerini bulabiliriz. Ters DFT formülü aşağıdaki gibidir.

$$
x_{n} = \frac{1}{N} \sum_{k=0}^{N-1} X_{k} e^{i 2 \pi k n / N}
$$

## KFD'nin Limitleri

DFT metodu ile bir sinyalin frekanslarını bulabiliriz ancak büyük bir sinyalde bu işlemi yapmak çok uzun sürebilir.

```{python}
import numpy as np

def DFT(y):
    N = len(y)
    c = np.zeros(N, complex)
    for k in range(N):
        for n in range(N):
            c[k] += y[n]*np.exp(-2j*np.pi*k*n/N)
    return c

def gen_sig(sr):
    """
    function to generate
    a simple 1D signal with
    different sampling rate
    """
    ts = 1.0/sr
    t = np.arange(0,1,ts)
    freq = 1.
    x = 3*np.sin(2*np.pi*freq*t)
    return x

samplingRate = 20
# Toplam zamanı hesapla
print(f"{samplingRate} örneklem sayısı için geçen süre")
%timeit DFT(gen_sig(samplingRate))

samplingRate = 200
print(f"{samplingRate} örneklem sayısı için geçen süre")
# Toplam zamanı hesapla
%timeit DFT(gen_sig(sr))
```

Zaman sorunu aşmak için 1965'te Cooley ve Tukey bir algoritma geliştirdiler. Bu algoritma FFT (Fast Fourier Transform) olarak bilinir. FFT algoritması DFT'ye göre daha hızlı çalışır. FFT algoritmasının karmaşıklığı $O(n \log n)$ iken DFT'nin karmaşıklığı $O(n^2)$'dir.

## Kaynaklar

1. Python Programming and Numerical Methods, Qingkai Kong, 2018
2. <https://www.ams.org/journals/mcom/1965-19-090/S0025-5718-1965-0178586-1/>