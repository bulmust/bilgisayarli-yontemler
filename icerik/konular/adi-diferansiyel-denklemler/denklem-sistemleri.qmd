---
title: "Denklem Sistemleri"
---


Adi diferansiyel denklem sistemlerini çözmek için Euler yöntemini vektör haline getirip kullanabiliriz. Bunun için [bilYonMod.py](/moduller/bilYonMod.py) modülündende tanımlanan `add_coz_euler_sistem(fonk_yVek_x, xBaslangic, xBitis, yBaslangic_vek, adimSayisi)` fonksiyonunu kullanılmalıdır.

::: {.callout-note}
`add_coz_euler_sistem` fonksiyonunu inceleyiniz.
:::

### Örnek 1

Aşağıdaki denklem sistemini Euler yöntemi ile çözelim.

$$
\begin{align*}
y'(x,v) &= x \\
v'(x,y) &= x^{2}
\end{align*}
$$

Çözüm başlangıç koşulları $y(0)=1$ ve $v(0)=1$ olsun. Çözüm aralığı $x=0$ ile $x=10$ arasında olsun. Çözüm adım sayısı $n=100$ olsun.

```{python}
################################################
## Modül yolunu varsayılan yol olarak ekleme ve modülü içe aktarma
import os
import sys
# Bu dosyanın bulunduğu dizini al
current_dir = os.path.abspath('')
# 3 üst dizine çık
module_dir = os.path.join(os.path.abspath(os.path.join(current_dir, os.pardir, os.pardir, os.pardir)), 'moduller')
# moduller dizinini yol olarak ekle
sys.path.append(module_dir)
# bilYonMod.py modülünü içe aktar
import bilYonMod as bym
################################################
import numpy as np
import matplotlib.pyplot as plt

def fonk_yVek_x(yVek, x):
    y = yVek[0]
    v = yVek[1]
    dydx = x
    dvdx = x**2
    return np.array([dydx, dvdx])

y0 = 1
v0 = 1
x0 = 0
x1 = 10
n = 100

# add_coz_euler_sistem(fonk_yVek_x, xBaslangic, xBitis, yBaslangic_vek, adimSayisi)
xTum, yTum_Vek = bym.add_coz_euler_sistem(fonk_yVek_x, x0, x1, np.array([y0, v0]), n)
# Analitik çözüm
yAnalitik = xTum**2/2 + 1
vAnalitik = xTum**3/3 + 1
# Grafik
plt.plot(xTum, yTum_Vek[0], label='y(x)', color='red')
plt.plot(xTum, yAnalitik, label='y(x) analitik', color='black', linestyle='--')
plt.plot(xTum, yTum_Vek[1], label='v(x)', color='blue')
plt.plot(xTum, vAnalitik, label='v(x) analitik', color='black', linestyle='--')
plt.xlabel('x')
plt.ylabel('y(x), v(x)')
plt.legend()
plt.show()
```

## Alıştırma 1