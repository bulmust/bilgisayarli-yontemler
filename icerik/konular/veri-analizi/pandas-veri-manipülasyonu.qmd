---
title: "pandas - Veri Manipülasyonu"
---

## `pandas` Modülü Tekrar

Şuana kadar öğrendiğimiz komutların bir listesinini yazalım.

```python
import pandas as pd
# Seriler
s= pd.Series([100, 200, 300, 400, 500]\
    ,index= ["Londra", "Paris", "Roma", "Berlin", "Oslo"])
s.index
s.values
s.name
# Seri Satırı (index)
s["Londra"]
s.Londra
s.describe()
s.max()
s.min()
s.std()
s.mean()
s.median()
s.info()
s.plot(kind= 'line'), # bar, barh, pie
print("---o---o---o---")
# DataFrame'ler
df= pd.DataFrame({
    "Şehir": ["Londra", "Paris", "Roma", "Berlin", "Oslo"],
    "Nüfus": [100, 200, 300, 400, 500],
    "Alan": [1000, 2000, 3000, 4000, 5000]
})
df.columns
df["Nüfus"] #! Sütun İsmi
df[["Nüfus","Şehir"]]
df.Nüfus #! Türkçe karakter kullanma, Sütun ismi
df.loc[0] # Satır ismi (etiket, index) olmadığı için 0
df.loc[[0, 1]] # Satır ismi (etiket, index) olmadığı için 0,1
df.rename(columns= {"Nüfus" : "Nüfuslar"})
df.info()
```

## Veri Çekme

`pandas` modülü ile bir dosyadaki veriyi okuyabildiğimiz gibi bir internet sitesinden de veriyi çekebiliriz.

```{python}
import pandas as pd
# Veri çekme
df= pd.read_csv('https://raw.githubusercontent.com/jrjohansson/numerical-python-book-code/master/european_cities.csv')
print(df)
```

## Başlık Değiştirme

Şimdi `df` veri çerçevesinin "Rank" başlığını "Ranks" yapalım.

```{python}
import pandas as pd
# Veri çekme
df= pd.read_csv('https://raw.githubusercontent.com/jrjohansson/numerical-python-book-code/master/european_cities.csv')
# Sütunlar
print(df.columns)
# Sütun ismi değiştirme
df= df.rename(columns={'Rank':'Ranks'})
print(df.columns)
```

Aynı işlemi `inplace=True` ile de yapabiliriz.

```{python}
import pandas as pd
# Veri çekme
df= pd.read_csv('https://raw.githubusercontent.com/jrjohansson/numerical-python-book-code/master/european_cities.csv')
df.rename(columns={'Ranks':'Rank'}, inplace=True)
print(df.columns)
```

Inplace işlemi veri çerçevesi ile yapılan işlemlerin çoğunda bulunur. Her seferinde `df=df. ...` şeklinde yazmak yerine `inplace=True` yazabiliriz.

## Başını ve Sonunu Gösterme

Çok büyük veriye sahip veri çerçevesinin içeriğine göz atmak için `head` ve `tail` komutlarını kullanırız.

```{python}
import pandas as pd
# Veri çekme
df= pd.read_csv('https://raw.githubusercontent.com/jrjohansson/numerical-python-book-code/master/european_cities.csv')
# ilk 5 satırı göster
print(df.head())
print("---o---o---o---")
# son 5 satırı göster
print(df.tail())
print("---o---o---o---")
# ilk 7 satırı göster
df.head(7)
```

## Satır Sütunlara `numpy` array'i gibi Erişim

`pandas` veri çerçevesine numpy array'i gibi erişmek de mümkün. Bunun için `iloc` komutunu kullanırız.,

```{python}
import pandas as pd
# Veri çekme
df= pd.read_csv('https://raw.githubusercontent.com/jrjohansson/numerical-python-book-code/master/european_cities.csv')
# ilk 5 satırı göster
print(df.head())
print("---o---o---o---")
# mat1= np.array([[1,2],[3,4]])
# mat1[1,0] -> 3
print(df.iloc[2,3])
print("---o---o---o---")
print(df.iloc[0:2,1:3])
```

## Boyut Öğrenme

Tıpkı `numpy`'da olduğu gibi burada da `shape` komutu ile veri çerçevesinin boyutunu öğrenebiliriz.

```{python}
import pandas as pd
# Veri çekme
df= pd.read_csv('https://raw.githubusercontent.com/jrjohansson/numerical-python-book-code/master/european_cities.csv')
# Boyut göster
df.shape
```

## Yeni Sütun Ekleme ve Silme

Veri çerçevesinde yeni bir sütun eklemek için `df["Yeni Sütun"]` şeklinde bir komut kullanırız.

```{python}
import pandas as pd
# Veri çekme
df= pd.read_csv('https://raw.githubusercontent.com/jrjohansson/numerical-python-book-code/master/european_cities.csv')
# NumericPopulation sütunu ekleyelim. İçerisine Population sütununu kopyalayalım.
df["NumericPopulation"]= df["Population"]
print(df.head())
```

Veri çerçevesinden bir sütunuu silmek için `df.drop("Sütun İsmi", axis=1)` komutunu veya `df.pop("Sütun İsmi")`, bir satırı silmek için `df.drop("İndex İsmi", axis=0)` komutunu kullanırız.

- `df.pop` komutu veri çerçevesini değiştirirken `df.drop` komutu veri çerçevesini değiştirmez, değişikliği görmek için `inplace=True` eklememiz gerekir.
- `axis=0` varsayılan değerdir. Bu yüzden `axis=0` yazmamıza gerek yoktur.

```{python}
import pandas as pd
# Veri çekme
df= pd.read_csv('https://raw.githubusercontent.com/jrjohansson/numerical-python-book-code/master/european_cities.csv')
# Sütun isimlerini göster
print(df.columns)
print("---o---o---o---")
# Population sütununu sil
df.drop("Population", axis=1, inplace=True)
#df.pop("Population") # <----- bu da aynı işi yapar
print(df.columns)
print("---o---o---o---")
print(df.head())
print("---o---o---o---")
print(df.drop(0, axis=0).head(3))
print("---o---o---o---")
print(df.head())
```

## Biricik (Unique) Değerler

`unique` komutu ile bir sütunun içindeki değerlerin biricik (unique) değerlerini görebiliriz.

```{python}
import pandas as pd
# Veri çekme
df= pd.read_csv('https://raw.githubusercontent.com/jrjohansson/numerical-python-book-code/master/european_cities.csv')
# State sütunundaki değerler
print(df["State"].values)
print("---o---o---o---")
# State sütunundaki biricik değerler
print(df["State"].unique())
```

## Biricik Değerlerin Sayısı

`value_counts()` komutu ile bir sütunun içindeki değerlerin biricik (unique) değerlerinin sayısını görebiliriz.

```{python}
import pandas as pd
# Veri çekme
df= pd.read_csv('https://raw.githubusercontent.com/jrjohansson/numerical-python-book-code/master/european_cities.csv')
# State sütunundaki biricik değerlerin sayısı
print(df["State"].value_counts())
```

## Tekrar Eden Değerler

`duplicated` komutu ile bir sütunun içindeki değerlerin tekrarlanan değerlerini görebiliriz. Bu komutun sonucunda `True` ve `False` değerleri döner.

```{python}
import pandas as pd
# Veri çekme
df= pd.read_csv('https://raw.githubusercontent.com/jrjohansson/numerical-python-book-code/master/european_cities.csv')
# State sütunundaki tekrar eden değerler
print(df["State"].duplicated().head(8))
print("---o---o---o---")
# State sütunundaki ilk 8 değer
print(df.State.head(8))
```

## Veri Manipülasyonu ve Veri Temizleme

Elimize geçen veride sistematik olarak değiştirmemiz gereken bazı durumlar olabilir. Bu tip veriye ham veri adı verilir. Ham veri içerisinde istenmeyen veya yanlış satırlar, yanlış yazılmış sütunlar olabilir. Bunun gibi kusurları temizlemek ve üzerine çalışılabilir bir hale getirmek için manipüle (oynama) yapmamız gerekir.

Bunun için `df` değişkenine tekrar bakalım.
```{python}
import pandas as pd
# Veri çekme
df= pd.read_csv('https://raw.githubusercontent.com/jrjohansson/numerical-python-book-code/master/european_cities.csv')
# İlk 3 satırı göster
print(df.head(3))
print("---o---o---o---")
# Veri hakkında bilgi
print(df.info())
print("---o---o---o---")
# State sütunundaki ilk 3 değer
print(df["State"].head(3).values)
```

İlk bakışta görülen kusurlar şunlardır:

1. `0`. indexe sahip olan satırda `London [2]` yazılmış.
2.  `Population` sütunu sayı olması gerekirken `object` olarak kaydedilmiş. Yani `string` olarak kaydedilmiş.
3.  `State` sütunundaki verilerin başında bir adet fazladan boşluk var.

Bu sorunları sırasıyla çözelim.

```{python}
import pandas as pd
# Veri çekme
df= pd.read_csv('https://raw.githubusercontent.com/jrjohansson/numerical-python-book-code/master/european_cities.csv')
## 1.
df.iloc[0,1]= "London"
print(df.loc[0])
print("---o---o---o---")
## 2.
## Aşağıdaki komut çalışmıyor çünkü python virgüllü sayıları noktaya çeviremiyor.
#df["Population"]= df["Population"].astype(float)
# Tüm virgülleri kaldıralım ve float tipine çevirelim.
df["Population"]=df.Population.apply(lambda x: int(x.replace(',','')))
# str1='Naber Gizem'
# print(str1.replace('G',''))
print(df.info())
print("---o---o---o---")
print(df.head())
print("---o---o---o---")
## 3.
print(df["State"].head(3).values)
print("---o---o---o---")
# strip() fonksiyonu stringin başındaki ve sonundaki boşlukları siler.
df.State= df.State.apply(lambda x: x.strip())
# Göster
print(df["State"].head(3).values)
```

Veri çerçevesindeki verilerin ilk harflerini `df.State.str.capitalize()` ile büyük yapabiliriz.

## Etiket (Index) İşlemleri

Kullandığımız veri çerçevesinde etiket bulunmuyor. Tüm veri şehirler üzerine kurulu olduğu için şehirleri etiket olarak alabiliriz.

```{python}
import pandas as pd
# Veri çekme
df= pd.read_csv('https://raw.githubusercontent.com/jrjohansson/numerical-python-book-code/master/european_cities.csv')
# Etiket ismini City'nin değerleri olarak ata
df.index= df["City"]
# Göster
df.head()
```

Başlıklara bakarsak etiket isminin de `City` olduğunu görebiliriz. Etiket ismi ile sütun ismi ayrışması adına etiket ismi alt satıra yazılmıştır.

Etiketleri `df.index` ile de görebildiğimizi hatırlatalım.

```{python}
import pandas as pd
# Veri çekme
df= pd.read_csv('https://raw.githubusercontent.com/jrjohansson/numerical-python-book-code/master/european_cities.csv')
# Etiket ismini City'nin değerleri olarak ata
df.index= df["City"]
# Rank sütununu göster. Etiketler de gözükecek.
print(df.Rank.head())
print("---o---o---o---")
# Etiketleri göster ve listeye çevir
print(list(df.head().index))
```

Etiket grubunun ismini yani başlığını `df.index.name` ile görebiliriz/değiştirebiliriz.

```{python}
import pandas as pd
# Veri çekme
df= pd.read_csv('https://raw.githubusercontent.com/jrjohansson/numerical-python-book-code/master/european_cities.csv')
# Etiket ismini City'nin değerleri olarak ata
df.index= df["City"]
# Etiket isimlerini None yap
df.index.name= 'EtiketIsmi'
#$ Etiket ismini sıfırla
#df.index.name= None
# Göster
df.head()
print("---o---o---o---")
# Tüm etiketleri göster
print(df.head().index)
```

`reset_index()` komutu ile etiketleri varsayılan numaralara geri döndürebiliriz. Bu komut etiketleri numaraya döndürürken, kayıtlı olan etiketleri de yeni bir sütun olarak ekler.

```{python}
import pandas as pd
# Veri çekme
df= pd.read_csv('https://raw.githubusercontent.com/jrjohansson/numerical-python-book-code/master/european_cities.csv')
# Etiket ismini City State sütunlarının değerlerinin toplamı olarak ata
df.index= df["City"]+ " " + df["State"]
# Göstpd.Int16Dtype(er)
print(df.head())
# Etiketleri sıfırla
df=df.reset_index()
print("---o---o---o---")
print(df.head())
```

## Sıralama

**Tüm veriyi** etiket isimlerine göre sıralayabiliriz.

```{python}
import pandas as pd
# Veri çekme
df= pd.read_csv('https://raw.githubusercontent.com/jrjohansson/numerical-python-book-code/master/european_cities.csv')
# Etiket ismini City'nin değerleri olarak ata
df.index= df["City"]
# Göster
df.head()
print("---o---o---o---")
# Tüm veriyi etiket isimlerine göre sırala
df= df.sort_index()
# Göster
df.head()
```

Tüm veriyi belirlediğimiz sütuna göre sıralayabiliriz.

```{python}
import pandas as pd
# Veri çekme
df= pd.read_csv('https://raw.githubusercontent.com/jrjohansson/numerical-python-book-code/master/european_cities.csv')
# Etiket ismini City'nin değerleri olarak ata
df.index= df["City"]
# Göster
df.head()
print("---o---o---o---")
# Tüm veriyi belirlediğimiz sütuna, Rank süttununa göre sırala
df.sort_values(by="Rank", ascending=False, inplace=True)
# Göster
df.head()
```

## Multi-Index

Veri çerçevesindeki veriyi gruplayabiliriz. Örneğin etiketlerde hem ülkeler, hem de o ülkelere ait olan şehirler olsun. Yani iki adet etiket olsun. `set_index` komutu ile etiketleri belirlerken iki sütun olarak girelim.

```{python}
import pandas as pd
# Veri çekme
df= pd.read_csv('https://raw.githubusercontent.com/jrjohansson/numerical-python-book-code/master/european_cities.csv')
# 2 adet etiket kullan.
# 1. City'nin değerleri
# 2. State'nin değerleri
df.set_index(["State", "City"], inplace=True)
print("2 adet etiketli veri çerçevesi")
print(df.head())
print("---o---o---o---")
# 2 etiketli dataframi 0. etikete göre sırala
print("2 adet etiketli veri çerçevesi, 0. etikete göre sırala")
print(df.sort_index(level=0).head())
print("---o---o---o---")
# 2 etiketli dataframi 1. etikete göre sırala
print("2 adet etiketli veri çerçevesi, 1. etikete göre sırala")
print(df.sort_index(level=1).head())
print("---o---o---o---")
# 2 etiketli dataframi 0. etikete göre sırala ve Sweden olanları göster
```

İki adet etikete sahip veri çerçevesine erişmek için `df.loc["Etiket1", "Etiket2"]` komutunu kullanırız.

```{python}
import pandas as pd
# Veri çekme
df= pd.read_csv('https://raw.githubusercontent.com/jrjohansson/numerical-python-book-code/master/european_cities.csv')
# 2 adet etiket kullan.
# 1. City'nin değerleri
# 2. State'nin değerleri
df.set_index(["State", "City"], inplace=True)
print("2 adet etiketli veri çerçevesi")
print(df.head())
print("---o---o---o---")
# Germany olanı göster
print("Etiketi Germany olanı göster")
# Çalışmayan örnek:
#print(df.loc[('Germany')])
print(df.loc[(' Germany')].head())
print("---o---o---o---")
# Germany, Berlin olanı göster
print("Etiketi Germany, Berlin olanları göster")
print(df.loc[(' Germany', 'Berlin')])
```

## Toplama İşlemi

Veri çerçevesindeki verileri `df.sum()` ile toplayabiliriz.

```{python}
import pandas as pd
import numpy as np
# Veri çekme
df= pd.read_csv('https://raw.githubusercontent.com/jrjohansson/numerical-python-book-code/master/european_cities.csv')
# Population sütununu göster
print(df.Population.head())
print("---o---o---o---")
# Dtype göster
print(f"Data tipi : {df.Population.dtype}")
print("---o---o---o---")
# Population sütununu topla
print(df.Population.sum())
print("---o---o---o---")
# Tüm sütunları numpy ile topla
print(np.sum(df.Population.values))
```

# Neler Öğrendik?

```python
# Seriler
s= pd.Series()
s.index
s.values
s.name
s["Londra"]
s.Londra
s.describe()
s.max()
s.min()
s.std()
s.mean()
s.median()
s.plot(kind= 'line')
s.plot(kind= 'bar')
s.plot(kind= 'barh')
s.plot(kind= 'pie')
# ----------------
df= pd.DataFrame()
df.columns
df["Nüfus"] #! Sütunun İsmi
df.Nüfus #! Türkçe karakter kullanma, Sütunun ismi
df.loc["Londra"] # Satır ismi
df.loc[["Londra", "Roma"]]
df.rename(columns= {"Nüfus" : "Nüfuslar"})
df.info()
# ----------------
df= pd.read_csv()
df.head()
df.tail()
df.loc["Etiket İsmi"]
df.iloc[0]
df.iloc[1, 2]
df.shape
df["Yeni Sütun"]
df["Sütun İsmi"].unique()
df["Sütun İsmi"].value_counts()
df["Sütun İsmi"].duplicated()
df.drop("Sütun İsmi", axis=1)
df.pop("Sütun İsmi")
df.drop("Etiket İsmi", axis=0)
df.Population.apply(lambda x: int(x.replace(',','')))
df.State.str.capitalize()
df.index.name
df.sort_index()
df.sort_values(by="Sütun İsmi", ascending=True)
df.set_index(["State", "City"]).sort_index(level=0)
df.set_index(["State", "City"]).sort_index(level=1)
df.sum()
```