{
  "hash": "54db20fcf92990d7a9786d6e438a2393",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Euler Yöntemi\"\nbibliography: euler-yontemi.bib\n---\n\n- Euler yöntemi diferansiyel denklem çözümü için kullanılan en basit yöntemdir.\n- Alternatif isimleri Euler-Cauchy veya nokta-eğim (point-slope) yöntemidir.\n- Kabaca türevin tanımını kullanır.\n\n$$\ny'(x)= \\frac{y(x+h)-y(x)}{h}\n$$\n\n$$\ny(x+h)=y(x)+h\\times y'(x)\n$$\n\n- Amacımız başlangıç koşulundan itibaren adım adım $y(x)$ fonksiyonunu bulmaktır.\n- $x$ noktasından $x+h$ noktasına ilerlediğimiz için bu yöntem \"ileri adım\" yöntemidir.\n\n### Hata Analizi\n\nBir uygulamada Taylor serisi kullanılırsa hata analizi aşağıdaki gibi yapılır. Farz edelim ki $f(x+h)$ fonksiyonunu $f(x)$ etrafında seriye açıyoruz ve $n$'nci dereceden bir terimden sonra kesiyoruz. $E_{n}$ terimi, kestiğimiz terimden sonraki terimler yani hata terimi olsun.\n\n$$\nf(x+h)=f(x)+f'(x)h+\\frac{f''(x)}{2!}h^2+\\cdots+\\frac{f^{(n)}(x)}{n!}h^n+E_{n}\n$$\n\nHata terimi $E_{n}$'e kesme hatası (truncation error) adı verilir. Bu hatanın en büyük değeri Taylor teoreminden bulunabilir.\n\n$$\nE_{n}=f^{n+1}(\\xi)\\frac{h^{n+1}}{(n+1)!}\n$$\n\nBurada $\\xi$ $x$ ile $x+h$ arasında bir değerdir. Bu değer ulaşılabilir değilse kesme hatasını belirleyen terim $h$ adım aralığı olacaktır. Yani \n\n$$\nE_{n}=O(h^{n+1})\n$$\n\n### Euler Yöntemi ile Çözümde Hata Analizi\n\n- Euler yöntemi kullanılırken her bir adımdaki kesme hatası $O(h^2)$'dir çünkü ikinci dereceden türev terimlerini içerir. Her $h$ adımda bu hata üst üste binecektir. Yani denklem $n$ adımda çözülüyorsa kesme hatası da $n$ kere tekrarlanacaktır.\n\n$$\nE_{acc}=nE_{2}=\\frac{x_{n}-x_{0}}{h}E_{2}=O(h)\n$$\n\nEuler yöntemi ile diferansiyel denklem çözümünde kesme hata payı $h$ adım aralığı ile orantılı olacaktır.\n\n### Euler Yönteminin Geometrik Tasviri\n\n- Basitlik için çözmek istediğimiz $y$ fonksiyonu bir değişkene bağlı olsun. Bu fonksiyonun $x$ ve $x+h$ arasındaki değişimi aşağıdaki gibi olur [@BibEntry2024Feb].\n\n$$\ny(x+h)=y(x)+h\\times y'(x)\n$$\n\n![Euler Yönteminin Geometrik Tasviri](https://tutorial.math.lamar.edu/classes/de/EulersMethod_Files/image001.png)\n\n### Euler Yönteminin Kodlanması\n\n`add_coz_euler` adlı fonksiyon [bilYonMod.py](/moduller/bilYonMod.py) modülünde tanımlıdır.\n\n::: {.callout-note}\n`add_coz_euler` fonksiyonunu inceleyiniz.\n:::\n\n::: {.callout-caution}\n`add_coz_euler(fonk_y_x, xBaslangic, xBitis, yBaslangic, adimSayisi)` fonksiyonunu çağırırken denklemin sağ tarafında yer alan ve çözmeniz gereken fonksiyonda önce **y** ardından **x** tanımlanmalıdır. Yani fonksiyon $f(y,x)$ şeklinde yazılmalıdır. Burada $y$ değişkeni $y(x)$ olarak tanımlanır, $x$ ise bağımsız değişkendir.\n:::\n\nAşağıdaki diferansiyel denklemi çözen bir örneği inceleyelim.\n\n$$\n\\frac{d}{dx}y(x) = x, \\quad y(0)=1, \\quad x=[0, 1], \\quad n=10000\n$$\n\nÇözüm aşağıdaki gibi olacaktır.\n\n$$\ny(x)=1+\\frac{x^{2}}{2}\n$$\n\n::: {#5aeea80e .cell execution_count=1}\n``` {.python .cell-code}\n################################################\n## Modül yolunu varsayılan yol olarak ekleme ve modülü içe aktarma\nimport os\nimport sys\n# Bu dosyanın bulunduğu dizini al\ncurrent_dir = os.path.abspath('')\n# 3 üst dizine çık\nmodule_dir = os.path.join(os.path.abspath(os.path.join(current_dir, os.pardir, os.pardir, os.pardir)), 'moduller')\n# moduller dizinini yol olarak ekle\nsys.path.append(module_dir)\n# bilYonMod.py modülünü içe aktar\nimport bilYonMod as bym\n################################################\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef fonk_y_x(y, x):\n    return x\n\nx0 = 0\ny0 = 1\nxStop = 1\nn = 10000\nxAll, yAll = bym.add_coz_euler(fonk_y_x, x0, xStop, y0, n)\n\nplt.plot(xAll, yAll, 'o-', color='r', label='Euler')\nplt.plot(xAll, 1+(xAll**2)/2, 'k', label='Analitik')\nplt.xlabel('$x$')\nplt.ylabel('$y(x)$')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](euler-yontemi_files/figure-html/cell-2-output-1.png){width=591 height=429}\n:::\n:::\n\n\n### Alıştırma 1\n\n1. Euler yöntemi ile aşağıdaki diferansiyel denklemleri çözün ve analitik çözüm ile karşılaştırın.\n\n$$\ny' + 4y = x^{2}, \\quad y(0)=1, \\quad x=[0, 0.03], \\quad n=10\n$$\n\nAnalitik çözüm: \n\n$$\ny(x)=\\frac{31}{32}e^{-4x} + \\frac{1}{4}x^{2}- \\frac{1}{8}x + \\frac{1}{32}\n$$\n\n---\n\n**Çözüm:**\n\n::: {#de427a9b .cell execution_count=2}\n``` {.python .cell-code}\n################################################\n## Modül yolunu varsayılan yol olarak ekleme ve modülü içe aktarma\nimport os\nimport sys\n# Bu dosyanın bulunduğu dizini al\ncurrent_dir = os.path.abspath('')\n# 3 üst dizine çık\nmodule_dir = os.path.join(os.path.abspath(os.path.join(current_dir, os.pardir, os.pardir, os.pardir)), 'moduller')\n# moduller dizinini yol olarak ekle\nsys.path.append(module_dir)\n# bilYonMod.py modülünü içe aktar\nimport bilYonMod as bym\n################################################\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Fonksiyon\ndef fonk_y_x(y, x):\n    return -4*y + x**2\n\nx0 = 0\ny0 = 1\nxStop = 0.03\nn = 10\nxAll, yAll = bym.add_coz_euler(fonk_y_x, x0, xStop, y0, n)\n# Analitik çözüm\nyAnalitik=(31/32)*np.exp(-4*xAll) + (1/4)*(xAll**2) - (1/8)*xAll + (1/32)\n# Çizdir\nplt.plot(xAll, yAll, 'o-', color='r', label='Euler')\nplt.plot(xAll, yAnalitik, 'k', label='Analitik')\nplt.xlabel('$x$')\nplt.ylabel('$y(x)$')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](euler-yontemi_files/figure-html/cell-3-output-1.png){width=599 height=429}\n:::\n:::\n\n\n### Problemler\n\n## Referanslar\n\n",
    "supporting": [
      "euler-yontemi_files"
    ],
    "filters": [],
    "includes": {}
  }
}